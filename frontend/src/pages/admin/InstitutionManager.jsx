import { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabase';
import './InstitutionManager.css';

const InstitutionManager = () => {
  const [institutions, setInstitutions] = useState([]);
  const [pools, setPools] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showForm, setShowForm] = useState(false);
  const [editingId, setEditingId] = useState(null);
  const [uploading, setUploading] = useState(false);
  const [filterType, setFilterType] = useState('all'); // 'all', 'pool', 'office'
  const [selectedPool, setSelectedPool] = useState('all'); // for filtering offices by pool
  const [formData, setFormData] = useState({
    slug: '',
    title: '',
    description: '',
    vision: '',
    mission: '',
    functions: '',
    structure: '',
    contact_phone: '',
    contact_email: '',
    contact_address: '',
    image_url: '',
    type: 'office',
    pool_id: ''
  });

  useEffect(() => {
    fetchInstitutions();
    fetchPools();
  }, []);

  const fetchInstitutions = async () => {
    try {
      setLoading(true);
      
      // Fetch all institutions first
      const { data: allInstitutions, error } = await supabase
        .from('institutions')
        .select('*')
        .order('title');

      if (error) throw error;

      // Map pool information manually (self-referencing)
      const institutionsWithPools = allInstitutions.map(inst => {
        if (inst.type === 'office' && inst.pool_id) {
          const poolData = allInstitutions.find(p => p.id === inst.pool_id);
          return {
            ...inst,
            pool: poolData ? { id: poolData.id, title: poolData.title } : null
          };
        }
        return inst;
      });

      setInstitutions(institutionsWithPools || []);
    } catch (error) {
      console.error('Error fetching institutions:', error);
      alert('·ã®·â∞·âã·àõ·âµ ·àò·à®·åÉ ·àõ·åç·äò·âµ ·ä†·àç·â∞·âª·àà·àù');
    } finally {
      setLoading(false);
    }
  };

  const fetchPools = async () => {
    try {
      const { data, error } = await supabase
        .from('institutions')
        .select('id, title')
        .eq('type', 'pool')
        .order('title');

      if (error) throw error;
      setPools(data || []);
    } catch (error) {
      console.error('Error fetching pools:', error);
    }
  };

  const handleImageUpload = async (e) => {
    try {
      setUploading(true);
      const file = e.target.files[0];
      if (!file) return;

      const fileExt = file.name.split('.').pop();
      const fileName = `${Math.random()}.${fileExt}`;
      const filePath = `institutions/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('media')
        .upload(filePath, file);

      if (uploadError) throw uploadError;

      const { data } = supabase.storage
        .from('media')
        .getPublicUrl(filePath);

      setFormData({ ...formData, image_url: data.publicUrl });
      alert('·àù·àµ·àç ·â†·âµ·ä≠·ä≠·àç ·â∞·å≠·äó·àç!');
    } catch (error) {
      console.error('Error uploading image:', error);
      alert('·àù·àµ·àç ·àò·å´·äï ·ä†·àç·â∞·âª·àà·àù');
    } finally {
      setUploading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      // Remove the 'pool' property (it's just for display, not a real database column)
      const { pool, ...dataToSave } = formData;
      
      if (editingId) {
        // Update existing institution
        const { error } = await supabase
          .from('institutions')
          .update(dataToSave)
          .eq('id', editingId);

        if (error) throw error;
        alert('·â∞·âã·àù ·àò·à®·åÉ ·â∞·àµ·â∞·ä´·ä≠·àè·àç!');
      } else {
        // Create new institution
        const { error } = await supabase
          .from('institutions')
          .insert([dataToSave]);

        if (error) throw error;
        alert('·ä†·ã≤·àµ ·â∞·âã·àù ·â∞·å®·àù·àØ·àç!');
      }

      resetForm();
      fetchInstitutions();
    } catch (error) {
      console.error('Error saving institution:', error);
      alert('·â∞·âã·àù ·àõ·àµ·âÄ·àò·å• ·ä†·àç·â∞·âª·àà·àù: ' + error.message);
    }
  };

  const handleEdit = (institution) => {
    // Extract only the database fields, excluding the 'pool' display property
    const { pool, ...editData } = institution;
    
    // Convert null values to empty strings for controlled inputs
    const cleanedData = Object.keys(editData).reduce((acc, key) => {
      acc[key] = editData[key] === null ? '' : editData[key];
      return acc;
    }, {});
    
    setFormData(cleanedData);
    setEditingId(institution.id);
    setShowForm(true);
    
    // Scroll to top of form
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleDelete = async (id) => {
    if (!confirm('·ä•·à≠·åç·å†·äõ ·äê·ãé·âµ ·ã≠·àÖ·äï ·â∞·âã·àù ·àò·à∞·à®·ãù ·ã≠·çà·àç·åã·àâ?')) return;

    try {
      const { error } = await supabase
        .from('institutions')
        .delete()
        .eq('id', id);

      if (error) throw error;
      alert('·â∞·âã·àù ·â∞·à∞·à≠·ãü·àç!');
      fetchInstitutions();
    } catch (error) {
      console.error('Error deleting institution:', error);
      alert('·â∞·âã·àù ·àò·à∞·à®·ãù ·ä†·àç·â∞·âª·àà·àù');
    }
  };

  const resetForm = () => {
    setFormData({
      slug: '',
      title: '',
      description: '',
      vision: '',
      mission: '',
      functions: '',
      structure: '',
      contact_phone: '',
      contact_email: '',
      contact_address: '',
      image_url: '',
      type: 'office',
      pool_id: ''
    });
    setEditingId(null);
    setShowForm(false);
  };

  if (loading) {
    return <div className="loading">·ä•·ã®·â∞·å´·äê ·äê·ãç...</div>;
  }

  // Filter institutions based on selected filters
  const filteredInstitutions = institutions.filter(inst => {
    if (filterType === 'pool') return inst.type === 'pool';
    if (filterType === 'office') {
      if (selectedPool === 'all') return inst.type === 'office';
      return inst.type === 'office' && inst.pool_id === selectedPool;
    }
    return true; // 'all'
  });

  // Group institutions by pool for grid view
  const groupedByPool = pools.reduce((acc, pool) => {
    acc[pool.id] = {
      pool,
      offices: institutions.filter(inst => inst.type === 'office' && inst.pool_id === pool.id)
    };
    return acc;
  }, {});

  return (
    <div className="institution-manager">
      <div className="manager-header">
        <div className="header-left">
          <h2>·ã®·â∞·âã·àõ·âµ ·ä†·àµ·â∞·ã≥·ã∞·à≠</h2>
          <div className="stats-badges">
            <span className="stat-badge pools">
              {pools.length} ·çë·àé·âΩ
            </span>
            <span className="stat-badge offices">
              {institutions.filter(i => i.type === 'office').length} ·çÖ/·â§·â∂·âΩ
            </span>
          </div>
        </div>
        <button 
          className="btn-primary"
          onClick={() => setShowForm(!showForm)}
        >
          {showForm ? 'üìã ·ãù·à≠·ãù·à≠ ·ä†·à≥·ã≠' : '+ ·ä†·ã≤·àµ ·â∞·âã·àù ·å®·àù·à≠'}
        </button>
      </div>

      {!showForm && (
        <div className="manager-controls">
          <div className="filter-section">
            <label>·ä†·ã≠·äê·âµ:</label>
            <div className="filter-buttons">
              <button 
                className={`filter-btn ${filterType === 'all' ? 'active' : ''}`}
                onClick={() => setFilterType('all')}
              >
                ·àÅ·àâ·àù ({institutions.length})
              </button>
              <button 
                className={`filter-btn ${filterType === 'pool' ? 'active' : ''}`}
                onClick={() => setFilterType('pool')}
              >
                ·çë·àé·âΩ ({pools.length})
              </button>
              <button 
                className={`filter-btn ${filterType === 'office' ? 'active' : ''}`}
                onClick={() => setFilterType('office')}
              >
                ·çÖ/·â§·â∂·âΩ ({institutions.filter(i => i.type === 'office').length})
              </button>
            </div>
          </div>

          {filterType === 'office' && (
            <div className="filter-section">
              <label>·çë·àç:</label>
              <select 
                value={selectedPool} 
                onChange={(e) => setSelectedPool(e.target.value)}
                className="pool-filter-select"
              >
                <option value="all">·àÅ·àâ·àù ·çë·àé·âΩ</option>
                {pools.map(pool => (
                  <option key={pool.id} value={pool.id}>
                    {pool.title}
                  </option>
                ))}
              </select>
            </div>
          )}
        </div>
      )}

      {showForm ? (
        <form className="institution-form" onSubmit={handleSubmit}>
          <h3>{editingId ? '·â∞·âã·àù ·ä†·à≠·âµ·ãï' : '·ä†·ã≤·àµ ·â∞·âã·àù'}</h3>

          <div className="form-row">
            <div className="form-group">
              <label>Slug (URL) *</label>
              <input
                type="text"
                value={formData.slug}
                onChange={(e) => setFormData({ ...formData, slug: e.target.value })}
                placeholder="council-office"
                required
              />
              <small>·ã®·â∞·âã·àô ·ã®·ã©·ä†·à≠·ä§·àç ·àò·â≥·ãà·âÇ·ã´ (·àù·à≥·àå: council-office)</small>
            </div>

            <div className="form-group">
              <label>·ä†·ã≠·äê·âµ *</label>
              <select
                value={formData.type}
                onChange={(e) => {
                  setFormData({ ...formData, type: e.target.value, pool_id: '' });
                }}
                required
              >
                <option value="office">·çÖ/·â§·âµ (Office)</option>
                <option value="pool">·çë·àç (Pool)</option>
              </select>
            </div>
          </div>

          {formData.type === 'office' && (
            <div className="form-group">
              <label>·ã®·âµ·äõ·ãç ·çë·àç? (Which Pool?) *</label>
              <select
                value={formData.pool_id}
                onChange={(e) => setFormData({ ...formData, pool_id: e.target.value })}
                required
              >
                <option value="">-- ·çë·àç ·ã≠·àù·à®·å° (Select Pool) --</option>
                {pools.map((pool) => (
                  <option key={pool.id} value={pool.id}>
                    {pool.title}
                  </option>
                ))}
              </select>
              <small>·ã≠·àÖ ·çÖ/·â§·âµ ·ã®·âµ·äõ·ãç ·çë·àç ·àµ·à≠ ·ä•·äï·ã∞·àö·ãà·ãµ·âÖ ·ã≠·àù·à®·å°</small>
            </div>
          )}

          <div className="form-group">
            <label>·à≠·ãï·àµ *</label>
            <input
              type="text"
              value={formData.title}
              onChange={(e) => setFormData({ ...formData, title: e.target.value })}
              placeholder="·ã®·â∞·âã·àô ·àô·àâ ·àµ·àù"
              required
            />
          </div>

          <div className="form-group">
            <label>·àò·åç·â¢·ã´ ·àò·åç·àà·å´ *</label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              placeholder="[·à≠·ãï·àµ] ·â†·ä†·âÉ·âÇ ·âÉ·àä·â≤ ·ä≠·çç·àà ·ä®·â∞·àõ ·ä†·àµ·â∞·ã≥·ã∞·à≠ ·ãç·àµ·å• ·ã´·àà ·ä†·àµ·çà·àã·åä ·ã®·à•·à´ ·ä≠·çç·àç ·äê·ãç·ç¢"
              rows="4"
              required
            />
            <small style={{color: '#888', fontSize: '0.85rem'}}>
              üìù Default template: "[Title] ·â†·ä†·âÉ·âÇ ·âÉ·àä·â≤ ·ä≠·çç·àà ·ä®·â∞·àõ ·ä†·àµ·â∞·ã≥·ã∞·à≠ ·ãç·àµ·å• ·ã´·àà ·ä†·àµ·çà·àã·åä ·ã®·à•·à´ ·ä≠·çç·àç ·äê·ãç·ç¢"
            </small>
          </div>

          <div className="form-group">
            <label>·à´·ãï·ã≠ (Vision)</label>
            <textarea
              value={formData.vision}
              onChange={(e) => setFormData({ ...formData, vision: e.target.value })}
              placeholder="·â†·ä†·âÉ·âÇ ·âÉ·àä·â≤ ·ä≠·çç·àà ·ä®·â∞·àõ ·ãç·àµ·å• ·ä®·çç·â∞·äõ ·å•·à´·âµ ·ã´·àà·ãç ·ä†·åà·àç·åç·àé·âµ ·â†·àò·àµ·å†·âµ ·àà·àõ·àÖ·â†·à®·à∞·â° ·ã®·â∞·àª·àà ·àÖ·ã≠·ãà·âµ ·àà·àõ·àù·å£·âµ ·àò·à•·à´·âµ·ç¢"
              rows="3"
            />
            <small style={{color: '#888', fontSize: '0.85rem'}}>
              üìù Default: "·â†·ä†·âÉ·âÇ ·âÉ·àä·â≤ ·ä≠·çç·àà ·ä®·â∞·àõ ·ãç·àµ·å• ·ä®·çç·â∞·äõ ·å•·à´·âµ ·ã´·àà·ãç ·ä†·åà·àç·åç·àé·âµ ·â†·àò·àµ·å†·âµ ·àà·àõ·àÖ·â†·à®·à∞·â° ·ã®·â∞·àª·àà ·àÖ·ã≠·ãà·âµ ·àà·àõ·àù·å£·âµ ·àò·à•·à´·âµ·ç¢"
            </small>
          </div>

          <div className="form-group">
            <label>·â∞·àç·ãï·äÆ (Mission)</label>
            <textarea
              value={formData.mission}
              onChange={(e) => setFormData({ ...formData, mission: e.target.value })}
              placeholder="·â†·àô·ã´·ãä·äê·âµ ·ä•·äì ·â∞·åà·â¢ ·â†·àÜ·äê ·àò·äï·åà·ãµ ·àï·ãù·â°·äï ·àõ·åà·àç·åà·àç·ç£ ·àç·àõ·â≥·ãä ·à•·à´·ãé·âΩ·äï ·â†·â∞·âÄ·äì·åÄ ·àò·äï·åà·ãµ ·àõ·ä®·äì·ãà·äï ·ä•·äì ·ã®·â∞·âã·àô·äï ·â∞·åç·â£·à´·âµ ·â†·â•·âÉ·âµ ·àò·ãà·å£·âµ·ç¢"
              rows="3"
            />
            <small style={{color: '#888', fontSize: '0.85rem'}}>
              üìù Default: "·â†·àô·ã´·ãä·äê·âµ ·ä•·äì ·â∞·åà·â¢ ·â†·àÜ·äê ·àò·äï·åà·ãµ ·àï·ãù·â°·äï ·àõ·åà·àç·åà·àç·ç£ ·àç·àõ·â≥·ãä ·à•·à´·ãé·âΩ·äï ·â†·â∞·âÄ·äì·åÄ ·àò·äï·åà·ãµ ·àõ·ä®·äì·ãà·äï..."
            </small>
          </div>

          <div className="form-group">
            <label>·ãã·äì ·â∞·åç·â£·à´·âµ (Functions)</label>
            <textarea
              value={formData.functions}
              onChange={(e) => setFormData({ ...formData, functions: e.target.value })}
              placeholder={"·ã®·â∞·âã·àô·äï ·ãã·äì ·â∞·åç·â£·à´·âµ ·ä•·äì ·äÉ·àã·çä·äê·â∂·âΩ ·àò·ãà·å£·âµ\n·ã®·àõ·àÖ·â†·à®·à∞·â°·äï ·çç·àã·åé·âµ ·àõ·àü·àã·âµ ·ä•·äì ·ä†·åà·àç·åç·àé·âµ ·àò·àµ·å†·âµ\n·ä®·àå·àé·âΩ ·â∞·âã·àõ·âµ ·åã·à≠ ·â†·àò·â∞·â£·â†·à≠ ·ã®·àç·àõ·âµ ·à•·à´·ãé·âΩ·äï ·àõ·ä®·äì·ãà·äï\n·ã®·ä†·àò·à´·à≠ ·ä•·äì ·ã®·âÅ·å•·å•·à≠ ·àµ·à≠·ãì·â∂·âΩ·äï ·àõ·å†·äì·ä®·à≠"}
              rows="6"
            />
            <small style={{color: '#888', fontSize: '0.85rem'}}>
              üìù ·ä•·ã´·äï·ã≥·äï·ã±·äï ·â∞·åç·â£·à≠ ·â†·ä†·ã≤·àµ ·àò·àµ·àò·à≠ (Enter) ·ã≠·àà·ã©·ç¢ <br/>
              Default functions: "·ã®·â∞·âã·àô·äï ·ãã·äì ·â∞·åç·â£·à´·âµ ·ä•·äì ·äÉ·àã·çä·äê·â∂·âΩ ·àò·ãà·å£·âµ" / "·ã®·àõ·àÖ·â†·à®·à∞·â°·äï ·çç·àã·åé·âµ ·àõ·àü·àã·âµ..." etc.
            </small>
          </div>

          <div className="form-group">
            <label>·ã®·ä†·ã∞·à®·åÉ·åÄ·âµ ·àò·ãã·âÖ·à≠ (Structure)</label>
            <textarea
              value={formData.structure}
              onChange={(e) => setFormData({ ...formData, structure: e.target.value })}
              placeholder="[·à≠·ãï·àµ] ·ã®·â∞·âã·âã·àò·ãç ·ã®·ä†·âÉ·âÇ ·âÉ·àä·â≤ ·ä≠·çç·àà ·ä®·â∞·àõ ·ä†·àµ·â∞·ã≥·ã∞·à≠ ·ä†·ãà·âÉ·âÄ·à≠ ·àµ·à≠ ·äê·ãç·ç¢ ·â†·â∞·àà·ã´·ã© ·ä≠·çç·àé·âΩ ·ä•·äì ·â°·ãµ·äñ·âΩ ·ã®·â∞·ã∞·à´·åÄ ·à≤·àÜ·äï ·â†·àô·ã´·ãä ·â£·àà·àô·ã´·ãé·âΩ ·ã®·àö·àò·à´ ·äê·ãç·ç¢"
              rows="3"
            />
            <small style={{color: '#888', fontSize: '0.85rem'}}>
              üìù Default: "[Title] ·ã®·â∞·âã·âã·àò·ãç ·ã®·ä†·âÉ·âÇ ·âÉ·àä·â≤ ·ä≠·çç·àà ·ä®·â∞·àõ ·ä†·àµ·â∞·ã≥·ã∞·à≠ ·ä†·ãà·âÉ·âÄ·à≠ ·àµ·à≠ ·äê·ãç·ç¢ ·â†·â∞·àà·ã´·ã© ·ä≠·çç·àé·âΩ ·ä•·äì ·â°·ãµ·äñ·âΩ ·ã®·â∞·ã∞·à´·åÄ..."
            </small>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>·àµ·àç·ä≠</label>
              <input
                type="text"
                value={formData.contact_phone}
                onChange={(e) => setFormData({ ...formData, contact_phone: e.target.value })}
                placeholder="+251 11 XXX XXXX"
              />
              <small style={{color: '#888', fontSize: '0.85rem'}}>üìû Default: +251 11 XXX XXXX</small>
            </div>

            <div className="form-group">
              <label>·ä¢·àú·àç</label>
              <input
                type="email"
                value={formData.contact_email}
                onChange={(e) => setFormData({ ...formData, contact_email: e.target.value })}
                placeholder="info@akakikality.gov.et"
              />
              <small style={{color: '#888', fontSize: '0.85rem'}}>üìß Default: info@akakikality.gov.et</small>
            </div>
          </div>

          <div className="form-group">
            <label>·ä†·ãµ·à´·àª</label>
            <input
              type="text"
              value={formData.contact_address}
              onChange={(e) => setFormData({ ...formData, contact_address: e.target.value })}
              placeholder="·ä†·âÉ·âÇ ·âÉ·àä·â≤ ·ä≠·çç·àà ·ä®·â∞·àõ·ç£ ·ä†·ã≤·àµ ·ä†·â†·â£·ç£ ·ä¢·âµ·ãÆ·åµ·ã´"
            />
            <small style={{color: '#888', fontSize: '0.85rem'}}>üìç Default: ·ä†·âÉ·âÇ ·âÉ·àä·â≤ ·ä≠·çç·àà ·ä®·â∞·àõ·ç£ ·ä†·ã≤·àµ ·ä†·â†·â£·ç£ ·ä¢·âµ·ãÆ·åµ·ã´</small>
          </div>

          <div className="form-group">
            <label>·àù·àµ·àç / ·àé·åé</label>
            <input
              type="file"
              accept="image/*"
              onChange={handleImageUpload}
              disabled={uploading}
            />
            {uploading && <p className="uploading-text">·ä•·ã®·â∞·å´·äê ·äê·ãç...</p>}
            {formData.image_url && (
              <div className="image-preview">
                <img src={formData.image_url} alt="Preview" />
              </div>
            )}
          </div>

          <div className="form-actions">
            <button type="submit" className="btn-primary">
              {editingId ? '·àà·ãç·å¶·âΩ·äï ·ä†·àµ·âÄ·àù·å•' : '·â∞·âã·àù ·å®·àù·à≠'}
            </button>
            <button type="button" className="btn-secondary" onClick={resetForm}>
              ·à∞·à≠·ãù
            </button>
          </div>
        </form>
      ) : (
        <div className="institutions-list">
          {filterType === 'all' ? (
            // Show grouped by pools when viewing all
            <>
              {pools.length > 0 && (
                <div className="table-section">
                  <div className="table-section-header pools-header">
                    <h3>üèõÔ∏è ·çë·àé·âΩ (Pools)</h3>
                    <span className="count-badge">{pools.length}</span>
                  </div>
                  <table className="institutions-table">
                    <thead>
                      <tr>
                        <th className="col-image">·àù·àµ·àç</th>
                        <th className="col-title">·à≠·ãï·àµ</th>
                        <th className="col-slug">Slug</th>
                        <th className="col-offices">·çÖ/·â§·â∂·âΩ</th>
                        <th className="col-actions">·ä•·à≠·àù·åÉ·ãé·âΩ</th>
                      </tr>
                    </thead>
                    <tbody>
                      {pools.map((pool) => (
                        <tr key={pool.id} className="pool-row">
                          <td className="col-image">
                            {pool.image_url ? (
                              <img src={pool.image_url} alt={pool.title} className="table-img" />
                            ) : (
                              <div className="no-image pool-placeholder">üèõÔ∏è</div>
                            )}
                          </td>
                          <td className="col-title">
                            <strong>{pool.title}</strong>
                          </td>
                          <td className="col-slug">
                            <code className="slug-code">{pool.slug}</code>
                          </td>
                          <td className="col-offices">
                            <span className="office-count-badge">
                              {groupedByPool[pool.id]?.offices.length || 0} ·çÖ/·â§·â∂·âΩ
                            </span>
                          </td>
                          <td className="col-actions">
                            <div className="action-buttons">
                              <button className="btn-edit" onClick={() => handleEdit(pool)} title="·ä†·à≠·âµ·ãï">
                                ‚úèÔ∏è
                              </button>
                              <button className="btn-delete" onClick={() => handleDelete(pool.id)} title="·à∞·à≠·ãù">
                                üóëÔ∏è
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}

              {Object.entries(groupedByPool).map(([poolId, data]) => (
                data.offices.length > 0 && (
                  <div key={poolId} className="table-section">
                    <div className="table-section-header offices-header">
                      <h3>üìÇ {data.pool.title}</h3>
                      <span className="count-badge">{data.offices.length} ·çÖ/·â§·â∂·âΩ</span>
                    </div>
                    <table className="institutions-table">
                      <thead>
                        <tr>
                          <th className="col-image">·àù·àµ·àç</th>
                          <th className="col-title">·à≠·ãï·àµ</th>
                          <th className="col-slug">Slug</th>
                          <th className="col-type">·ä†·ã≠·äê·âµ</th>
                          <th className="col-actions">·ä•·à≠·àù·åÉ·ãé·âΩ</th>
                        </tr>
                      </thead>
                      <tbody>
                        {data.offices.map((office) => (
                          <tr key={office.id} className="office-row">
                            <td className="col-image">
                              {office.image_url ? (
                                <img src={office.image_url} alt={office.title} className="table-img" />
                              ) : (
                                <div className="no-image office-placeholder">üè¢</div>
                              )}
                            </td>
                            <td className="col-title">{office.title}</td>
                            <td className="col-slug">
                              <code className="slug-code">{office.slug}</code>
                            </td>
                            <td className="col-type">
                              <span className="badge office">·çÖ/·â§·âµ</span>
                            </td>
                            <td className="col-actions">
                              <div className="action-buttons">
                                <button className="btn-edit" onClick={() => handleEdit(office)} title="·ä†·à≠·âµ·ãï">
                                  ‚úèÔ∏è
                                </button>
                                <button className="btn-delete" onClick={() => handleDelete(office.id)} title="·à∞·à≠·ãù">
                                  üóëÔ∏è
                                </button>
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )
              ))}
            </>
          ) : (
            // Show simple table for filtered views
            <div className="table-section">
              <table className="institutions-table">
                <thead>
                  <tr>
                    <th className="col-image">·àù·àµ·àç</th>
                    <th className="col-title">·à≠·ãï·àµ</th>
                    <th className="col-slug">Slug</th>
                    <th className="col-type">·ä†·ã≠·äê·âµ</th>
                    {filterType !== 'pool' && <th className="col-pool">·çë·àç</th>}
                    <th className="col-actions">·ä•·à≠·àù·åÉ·ãé·âΩ</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredInstitutions.map((inst) => (
                    <tr key={inst.id} className={`${inst.type}-row`}>
                      <td className="col-image">
                        {inst.image_url ? (
                          <img src={inst.image_url} alt={inst.title} className="table-img" />
                        ) : (
                          <div className={`no-image ${inst.type}-placeholder`}>
                            {inst.type === 'pool' ? 'üèõÔ∏è' : 'üè¢'}
                          </div>
                        )}
                      </td>
                      <td className="col-title">
                        {inst.type === 'pool' ? <strong>{inst.title}</strong> : inst.title}
                      </td>
                      <td className="col-slug">
                        <code className="slug-code">{inst.slug}</code>
                      </td>
                      <td className="col-type">
                        <span className={`badge ${inst.type}`}>
                          {inst.type === 'pool' ? '·çë·àç' : '·çÖ/·â§·âµ'}
                        </span>
                      </td>
                      {filterType !== 'pool' && (
                        <td className="col-pool">
                          {inst.type === 'office' && inst.pool ? (
                            <span className="pool-tag">{inst.pool.title}</span>
                          ) : (
                            <span className="no-pool">‚Äî</span>
                          )}
                        </td>
                      )}
                      <td className="col-actions">
                        <div className="action-buttons">
                          <button className="btn-edit" onClick={() => handleEdit(inst)} title="·ä†·à≠·âµ·ãï">
                            ‚úèÔ∏è
                          </button>
                          <button className="btn-delete" onClick={() => handleDelete(inst.id)} title="·à∞·à≠·ãù">
                            üóëÔ∏è
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default InstitutionManager;

